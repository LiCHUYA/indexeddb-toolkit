{"version":3,"file":"indexeddb-toolkit.umd.js","sources":["../src/helper/formatReturn.ts","../src/constant/index.ts","../src/helper/getIndexedDBVersion.ts","../src/helper/getAllDB.ts","../src/helper/isTableExist.ts","../src/helper/closeAllConnections.ts","../src/utils/logger.ts","../src/core/useDatabase.ts","../src/core/database/deleteTable.ts","../src/core/database/deleteDatabase.ts","../src/core/database/deleteAllDatabases.ts","../src/core/database/closeAllConnections.ts","../src/core/database/getTableNames.ts","../src/core/database/deleteAllTables.ts","../src/core/table/createTable.ts","../src/core/table/insertOne.ts","../src/core/table/insertMany.ts","../src/core/table/findDBData.ts","../src/core/table/findByKey.ts","../src/core/table/findByIndex.ts","../src/core/table/deleteOneByPk.ts","../src/core/table/deleteOneByIndex.ts","../src/core/table/deleteManyByPK.ts","../src/core/table/deleteManyByIndex.ts","../src/core/table/updateDataByPrimaryKey.ts","../src/core/table/updateDataByIndex.ts","../src/core/query/QueryBuilder.ts","../src/core/query/createQuery.ts","../src/core/file/saveFilesToDB.ts","../src/core/file/getFileFromDB.ts","../src/core/file/getAllFiles.ts","../src/core/file/downloadFileFromDB.ts","../src/core/file/downloadAllFiles.ts","../src/core/file/revokeFileUrl.ts","../src/core/file/utils.ts","../src/core/migration/migrateData.ts","../src/core/json/exportToJson.ts","../src/core/json/importFromJson.ts","../src/index.ts"],"sourcesContent":["export interface IReturn {\r\n  code: number;\r\n  message: string;\r\n  result: any;\r\n}\r\n\r\nfunction returnFormatter(code: number, message: string, result: any = {}): IReturn {\r\n  return { code, message, result };\r\n}\r\n\r\nexport default returnFormatter;\r\n","import returnFormater from '../helper/formatReturn'\r\n// import { IReturn } from '../types'\r\n\r\nconst ResponseMessages = {\r\n  // 成功\r\n  OPEN_DB_SUCCESS: (data: {}) => returnFormater(200, `数据库打开成功`, data),\r\n  GET_TABLES_SUCCESS: (data = []) => returnFormater(200, '获取指定数据库中的表数量成功', data),\r\n  GET_ALL_DBS_SUCCESS: (res: any) => returnFormater(200, '获取所有数据库成功', res),\r\n  DEL_DB_SUCCESS: (info: any) => returnFormater(200, '删除数据库成功', info),\r\n  DEL_ALL_DB_SUCCESS: () => returnFormater(200, '删除所有数据库成功'),\r\n  \r\n  // 表操作相关\r\n  TB_CREATE_SUCCESS: (data?: any) => returnFormater(200, '表创建成功', {\r\n    ...data,\r\n    timestamp: Date.now()\r\n  }),\r\n\r\n  TB_INSERT_SUCCESS: (data: any) => returnFormater(200, '数据插入成功', {\r\n    insertedId: data.target?.result,\r\n    timestamp: Date.now()\r\n  }),\r\n\r\n  TB_INSERT_MANY_SUCCESS: (info: any) => returnFormater(200, '数据批量插入成功', info),\r\n  TB_SELECT_SUCCESS: (data?: any) => returnFormater(200, '数据查询成功', data),\r\n  TB_DELETE_SUCCESS: (info: any) => returnFormater(200, '表删除成功', info),\r\n  TB_DELETE_ERROR: (info: any) => returnFormater(408, '表删除失败', info),\r\n  TB_DELETE_ALL_SUCCESS: () => returnFormater(200, '所有表删除成功'),\r\n  TB_DELETE_ALL_ERROR: (info: any) => returnFormater(409, '所有表删除失败', info),\r\n  // 错误相关\r\n  DBNAME_IS_NULL: () => returnFormater(401, '数据库名称不能为空'),\r\n  TBNAME_IS_NULL: () => returnFormater(402, '表名不能为空'),\r\n  OPEN_DB_ERROR: (error: Response) => returnFormater(403, '数据库打开失败', error),\r\n  OPEN_TB_ERROR: (error: Response) => returnFormater(405, '表打开失败', error),\r\n  DB_NOTFOUND: () => returnFormater(406, '数据库不存在'),\r\n  DB_DELETE_ERROR: (error: Response) => returnFormater(407, '数据库删除失败', error),\r\n  TB_EXIST: (tableName: string) => returnFormater(406, `表 ${tableName} 已存在`, { tableName }),\r\n  JSON_IMPORT_SUCCESS: (data: any) => returnFormater(200, '数据导入成功', data),\r\n  JSON_IMPORT_ERROR: (error: any) => returnFormater(412, '数据导入失败', error),\r\n  TB_CREATE_ERROR: (error: any) => returnFormater(407, '表创建失败', {\r\n    error: error instanceof Error ? error.message : String(error)\r\n  }),\r\n\r\n  TB_NOTFOUND: (message?: string) => returnFormater(411, message || '表不存在'),\r\n  \r\n  TB_INSERT_ERROR: (error: any) => returnFormater(412, '数据插入失败', {\r\n    error: error instanceof Error ? error.message : String(error)\r\n  }),\r\n  JSON_EXPORT_SUCCESS: (data: any) => returnFormater(200, '数据导出成功', data),\r\n  JSON_EXPORT_ERROR: (error: any) => returnFormater(412, '数据导出失败', error),\r\n  // ... 其他消息保持 returnFormater 格式\r\n  TB_INSERT_MANY_ERROR: (error: Response) => returnFormater(413, '数据批量插入失败', error),\r\n  INSERT_DATA_ERROR: (data: Array<any>) => returnFormater(414, '数据格式不正确', data),\r\n  TB_SELECT_ERROR: (error: any) => returnFormater(415, '数据查询失败', error),\r\n  PRIMARY_KEY_IS_NULL: () => returnFormater(416, '主键不能为空'),\r\n  \r\n  // 基础错误\r\n  BASIC_ERROR: (error: any) => returnFormater(500, '操作失败', {\r\n    error: error instanceof Error ? error.message : error\r\n  }),\r\n\r\n  // 其他所有消息都使用 returnFormater\r\n  DATA_ERROR: (message: string) => returnFormater(404, message),\r\n  \r\n  TB_DELETE_MANY_BY_INDEXS_SUCCESS: (info: any) => returnFormater(200, '批量删除索引数据成功', info),\r\n  TB_DELETE_MANY_BY_INDEXS_ERROR: (error: any) => returnFormater(417, '批量删除索引数据失败', error),\r\n  \r\n  TB_SELECT_INDEX_NAME_IS_NULL: () => returnFormater(418, '索引名称不能为空'),\r\n  TB_SELECT_INDEX_VALUE_IS_NULL: () => returnFormater(419, '索引值不能为空'),\r\n  TB_DELETE_BY_INDEX_SUCCESS: (info: any) => returnFormater(200, '通过索引删除数据成功', info),\r\n  TB_DELETE_BY_INDEX_ERROR: (error: any) => returnFormater(420, '通过索引删除数据失败', error),\r\n  TB_DELETE_BY_PK_SUCCESS: (info: any) => returnFormater(200, '通过主键删除数据成功', info),\r\n  TB_DELETE_BY_PK_ERROR: (error: any) => returnFormater(421, '通过主键删除数据失败', error),\r\n  TB_INDEX_ERROR: () => returnFormater(422, '索引不存在'),\r\n  TB_SELECT_BY_INDEX_SUCCESS: (data: any) => returnFormater(200, '通过索引查询数据成功', data),\r\n  TB_SELECT_BY_INDEX_ERROR: (error: any) => returnFormater(423, '通过索引查询数据失败', error),\r\n  TB_DELETE_RECORDS_BY_KEYS_SUCCESS: (info: any) => returnFormater(200, '批量删除记录成功', info),\r\n  TB_DELETE_RECORDS_BY_KEYS_ERROR: (error: any) => returnFormater(424, '批量删除记录失败', error),\r\n\r\n  // 添加数据迁移相关的消息\r\n  TB_MIGRATE_SUCCESS: (data: any) => ({\r\n    code: 200,\r\n    message: '数据迁移成功',\r\n    result: data\r\n  }),\r\n\r\n  TB_MIGRATE_ERROR: (error: any) => ({\r\n    code: 430,\r\n    message: '数据迁移失败',\r\n    result: error\r\n  }),\r\n\r\n  // 添加文件存储相关的消息\r\n  FILE_SAVE_SUCCESS: (data: any) => ({\r\n    code: 200, \r\n    message: '文件保存成功',\r\n    result: data\r\n  }),\r\n\r\n  FILE_SAVE_ERROR: (error: any) => ({\r\n    code: 436,\r\n    message: '文件保存失败',\r\n    result: error\r\n  }),\r\n\r\n  FILE_GET_SUCCESS: (data: any) => ({\r\n    code: 200,\r\n    message: '获取文件成功', \r\n    result: data\r\n  }),\r\n\r\n  FILE_GET_ERROR: (error: any) => ({\r\n    code: 437,\r\n    message: '获取文件失败',\r\n    result: error\r\n  }),\r\n\r\n  FILE_DELETE_SUCCESS: (data: any) => ({\r\n    code: 200,\r\n    message: '删除文件成功',\r\n    result: data\r\n  }),\r\n\r\n  FILE_DELETE_ERROR: (error: any) => ({\r\n    code: 438,\r\n    message: '删除文件失败', \r\n    result: error\r\n  }),\r\n\r\n  FILE_IS_NULL: () => ({\r\n    success: false,\r\n    code: 40001,\r\n    message: 'File is required'\r\n  }),\r\n\r\n  TB_SELECT_BY_KEY_SUCCESS: (data: any) => returnFormater(200, '通过主键查询数据成功', data),\r\n  TB_SELECT_BY_KEY_ERROR: (error: any) => returnFormater(425, '通过主键查询数据失败', error),\r\n\r\n  TB_DATA_UPDATE_BY_INDEX_SUCCESS: (data: any) => returnFormater(200, '通过索引更新数据成功', data),\r\n  TB_DATA_UPDATE_BY_INDEX_ERROR: (error: any) => returnFormater(426, '通过索引更新数据失败', error),\r\n\r\n  TB_DATA_UPDATE_BY_PRIMARY_KEY_SUCCESS: (data: any) => returnFormater(200, '通过主键更新数据成功', data),\r\n  TB_DATA_UPDATE_BY_PRIMARY_KEY_ERROR: (error: any) => returnFormater(427, '通过主键更新数据失败', error)\r\n};\r\n\r\nexport default ResponseMessages;\r\n","import ResponseMessages from '../constant'\r\n\r\n/**\r\n * 获取指定数据库的版本号\r\n * @param databaseName 数据库名称\r\n * @returns Promise对象，包含数据库的版本号\r\n */\r\nfunction getIndexedDBVersion(databaseName: string): Promise<number> {\r\n  return new Promise<number>((resolve, reject) => {\r\n    if (!databaseName) {\r\n      return ResponseMessages.DBNAME_IS_NULL()\r\n    }\r\n    const request = window.indexedDB.open(databaseName)\r\n    request.onsuccess = function(event: any) {\r\n      const db: any = event.target.result\r\n      const version = db.version\r\n      db.close()\r\n      resolve(version)\r\n    }\r\n    request.onerror = function(event: any) {\r\n      reject(ResponseMessages.BASIC_ERROR(event.target.error))\r\n    }\r\n  })\r\n}\r\n\r\nexport default getIndexedDBVersion\r\n","import ResponseMessages from '../constant'\r\n\r\n/**\r\n * 获取所有数据库实例\r\n * @returns {Promise<{status: number, message: string, data: any[]}>} Promise对象，包含所有数据库实例的数组\r\n */\r\nasync function getAllDB(): Promise<any> {\r\n  try {\r\n    const res = await (indexedDB as any).databases()\r\n    if (Array.isArray(res)) {\r\n      return ResponseMessages.GET_ALL_DBS_SUCCESS(res)\r\n    } else {\r\n      return ResponseMessages.DB_NOTFOUND()\r\n    }\r\n  } catch (error) {\r\n    return ResponseMessages.BASIC_ERROR(error)\r\n  }\r\n}\r\n\r\nexport default getAllDB\r\n","import { useDatabase } from '../core'\r\n\r\n/**\r\n * 判断表是否存在\r\n * @param dbName 数据库名称\r\n * @param tableName 表名称\r\n * @returns 表是否存在的布尔值\r\n */\r\nasync function isTableExist(dbName: string, tableName: string): Promise<boolean> {\r\n  try {\r\n    const db = await useDatabase(dbName);\r\n    return db.objectStoreNames.contains(tableName);\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default isTableExist\r\n","/**\r\n * 关闭所有数据库连接\r\n */\r\nasync function closeAllConnections(): Promise<void> {\r\n  try {\r\n    // 获取当前所有打开的数据库连接\r\n    const databases = await window.indexedDB.databases();\r\n    \r\n    // 关闭每个数据库连接\r\n    for (const db of databases) {\r\n      if (db.name) {\r\n        const request = window.indexedDB.open(db.name);\r\n        request.onsuccess = (event: any) => {\r\n          const database = event.target.result;\r\n          database.close();\r\n        };\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error closing database connections:', error);\r\n  }\r\n}\r\n\r\nexport default closeAllConnections;","// 判断是否为生产环境的简单方法\r\nconst isProduction = () => {\r\n  try {\r\n    return window.location.hostname !== 'localhost' && \r\n           window.location.hostname !== '127.0.0.1';\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const logger = {\r\n  debug: (...args: any[]) => {\r\n    if (!isProduction()) {\r\n      console.debug('[IndexedDB Toolkit]', ...args);\r\n    }\r\n  },\r\n  error: (...args: any[]) => {\r\n    if (!isProduction()) {\r\n      console.error('[IndexedDB Toolkit]', ...args);\r\n    }\r\n  },\r\n  warn: (...args: any[]) => {\r\n    if (!isProduction()) {\r\n      console.warn('[IndexedDB Toolkit]', ...args);\r\n    }\r\n  }\r\n};","import ResponseMessages from '../constant/index'\r\nimport { getIndexedDBVersion } from '../helper/index'\r\nimport { logger } from '../utils/logger'\r\n\r\ninterface DatabaseResponse {\r\n  type: 'success' | 'error'\r\n  data: IDBDatabase\r\n  message: string\r\n}\r\n\r\n/**\r\n * 使用指定的数据库\r\n *\r\n * @param {string} dbName - 数据库名称\r\n * @param {number} [version] - 可选的版本号\r\n * @returns {Promise<IDBDatabase>} Promise对象，返回数据库实例\r\n * @throws {Error} 当数据库操作失败时抛出错误\r\n */\r\nfunction useDatabase(dbName: string, version?: number): Promise<IDBDatabase> {\r\n  if (!dbName) {\r\n    throw new Error(ResponseMessages.DBNAME_IS_NULL().message)\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const handleSuccess = (event: IDBVersionChangeEvent | Event) => {\r\n      const target = event.target as IDBOpenDBRequest\r\n      resolve(target.result)\r\n    }\r\n\r\n    const handleVersionError = async (dbName: string, error: any) => {\r\n      try {\r\n        // 获取已存在的数据库连接\r\n        const existingDB = (error.target as any)?.result\r\n        if (existingDB) {\r\n          const currentVersion = existingDB.version\r\n          existingDB.close()\r\n          \r\n          // 使用更高的版本号重新打开数据库\r\n          const newVersion = version || (currentVersion + 1)\r\n          logger.debug(`Upgrading database ${dbName} from version ${currentVersion} to ${newVersion}`)\r\n          \r\n          const newRequest = window.indexedDB.open(dbName, newVersion)\r\n          newRequest.onsuccess = handleSuccess\r\n          newRequest.onerror = (event: Event) => {\r\n            const target = event.target as IDBOpenDBRequest\r\n            reject(target.error)\r\n          }\r\n          newRequest.onupgradeneeded = (event) => {\r\n            logger.debug(`Database ${dbName} upgrade needed to version ${newVersion}`)\r\n            handleSuccess(event)\r\n          }\r\n          return\r\n        }\r\n\r\n        // 如果没有现有连接，获取新版本并递增\r\n        const currentVersion = await getIndexedDBVersion(dbName)\r\n        const newVersion = version || (currentVersion + 1)\r\n        logger.debug(`Opening database ${dbName} with new version ${newVersion}`)\r\n        \r\n        const newRequest = window.indexedDB.open(dbName, newVersion)\r\n        newRequest.onsuccess = handleSuccess\r\n        newRequest.onerror = (event: Event) => {\r\n          const target = event.target as IDBOpenDBRequest\r\n          reject(target.error)\r\n        }\r\n        newRequest.onupgradeneeded = (event) => {\r\n          logger.debug(`Database ${dbName} upgrade needed to version ${newVersion}`)\r\n          handleSuccess(event)\r\n        }\r\n      } catch (error) {\r\n        logger.error(`Error handling version change for database ${dbName}:`, error)\r\n        reject(error)\r\n      }\r\n    }\r\n\r\n    // 首次尝试打开数据库\r\n    const initialRequest = window.indexedDB.open(dbName, version)\r\n\r\n    initialRequest.onsuccess = handleSuccess\r\n\r\n    initialRequest.onerror = (event: Event) => {\r\n      const target = event.target as IDBOpenDBRequest\r\n      const error = target.error\r\n\r\n      if (error?.name === 'VersionError') {\r\n        handleVersionError(dbName, error)\r\n      } else {\r\n        logger.error(`Error opening database ${dbName}:`, error)\r\n        reject(error)\r\n      }\r\n    }\r\n\r\n    initialRequest.onupgradeneeded = (event) => {\r\n      logger.debug(`Database ${dbName} upgrade needed to version ${version}`)\r\n      handleSuccess(event)\r\n    }\r\n  })\r\n}\r\n\r\nexport default useDatabase","import ResponseMessages from '../../constant'\r\n\r\n/**\r\n * 删除指定表\r\n * @param dbName 数据库名称\r\n * @param tableName 表名称\r\n * @returns Promise对象，包含删除结果的状态和消息\r\n */\r\nfunction deleteTable(dbName: string, tableName: string): Promise<any> {\r\n  return new Promise<any>((resolve, reject) => {\r\n    const request = window.indexedDB.open(dbName)\r\n\r\n    request.onsuccess = (event: any) => {\r\n      const db = event.target.result\r\n      const version = db.version + 1\r\n\r\n      db.close()\r\n\r\n      const deleteRequest = window.indexedDB.open(dbName, version)\r\n\r\n      deleteRequest.onupgradeneeded = (event: any) => {\r\n        const upgradeDb = event.target.result\r\n        if (upgradeDb.objectStoreNames.contains(tableName)) {\r\n          upgradeDb.deleteObjectStore(tableName)\r\n        }\r\n      }\r\n\r\n      deleteRequest.onsuccess = (event: any) => {\r\n        event.target.result.close()\r\n        resolve(ResponseMessages.TB_DELETE_SUCCESS(`${tableName} 表删除成功`) as any)\r\n      }\r\n\r\n      deleteRequest.onerror = (event: any) => {\r\n        reject(ResponseMessages.TB_DELETE_ERROR(event))\r\n      }\r\n    }\r\n\r\n    request.onerror = (error: any) => {\r\n      reject(ResponseMessages.BASIC_ERROR(error))\r\n    }\r\n  })\r\n}\r\n\r\nexport default deleteTable\r\n","import ResponseMessages from '../../constant'\r\n\r\n/**\r\n * 删除指定数据库\r\n * @param dbName 数据库名称\r\n * @returns Promise对象，包含删除结果的状态和消息\r\n */\r\nfunction deleteDatabase(dbName: string): Promise<any> {\r\n  return new Promise<any>((resolve, reject) => {\r\n    const request = window.indexedDB.deleteDatabase(dbName)\r\n\r\n    request.onsuccess = (event: Event) => {\r\n      resolve(ResponseMessages.DEL_DB_SUCCESS(event))\r\n    }\r\n\r\n    request.onerror = (event: any) => {\r\n      reject(ResponseMessages.DB_DELETE_ERROR(event.target.error))\r\n    }\r\n  })\r\n}\r\nexport default deleteDatabase\r\n","import ResponseMessages from '../../constant'\r\nimport deleteDatabase from '../database/deleteDatabase'\r\nimport { getAllDB } from '../../helper/index'\r\n\r\n/**\r\n * 删除所有数据库\r\n * @returns Promise对象，包含删除结果的状态和消息\r\n * @example\r\n * 该方法请慎重使用。\r\n */\r\nasync function deleteAllDatabases(): Promise<any> {\r\n  try {\r\n    const allDatabasesResponse = await getAllDB()\r\n    if (allDatabasesResponse.result.length > 0) {\r\n      const deletePromises = allDatabasesResponse.result.map((db: any) => deleteDatabase(db.name))\r\n      await Promise.all(deletePromises)\r\n      return ResponseMessages.DEL_ALL_DB_SUCCESS()\r\n    } else {\r\n      return ResponseMessages.DB_NOTFOUND()\r\n    }\r\n  } catch (error) {\r\n    return ResponseMessages.BASIC_ERROR(error)\r\n  }\r\n}\r\n\r\nexport default deleteAllDatabases\r\n","/**\r\n * 关闭所有数据库连接\r\n */\r\nasync function closeAllConnections(): Promise<void> {\r\n  // 获取当前所有打开的数据库连接\r\n  const databases = await window.indexedDB.databases?.() || [];\r\n  \r\n  // 关闭每个数据库连接\r\n  databases.forEach((db: any) => {\r\n    if (db.name) {\r\n      const request = window.indexedDB.open(db.name);\r\n      request.onsuccess = (event: any) => {\r\n        const db = event.target.result;\r\n        db.close();\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nexport default closeAllConnections; ","import ResponseMessages from '../../constant'\r\nimport useDatabase from '../useDatabase'\r\n\r\n/**\r\n * 获取指定数据库中的表数量\r\n * @param dbName 数据库名称\r\n * @returns Promise对象，包含表名称数组\r\n */\r\nasync function getTableNames(dbName: string): Promise<any> {\r\n  // 检查数据库名称是否为空\r\n  if (!dbName) {\r\n    return ResponseMessages.DBNAME_IS_NULL();\r\n  }\r\n\r\n  try {\r\n    // 获取数据库对象\r\n    const db = await useDatabase(dbName);\r\n    // 将对象存储名称列表转换为数组\r\n    const objectStoreNames = Array.from(db.objectStoreNames);\r\n\r\n    // 根据对象存储名称列表的长度返回相应的消息\r\n    if (objectStoreNames.length === 0) {\r\n      return ResponseMessages.GET_TABLES_SUCCESS();\r\n    } else {\r\n      return ResponseMessages.GET_TABLES_SUCCESS(objectStoreNames as any);\r\n    }\r\n  } catch (error) {\r\n    return ResponseMessages.BASIC_ERROR(error);\r\n  }\r\n}\r\n\r\nexport default getTableNames\r\n","import { useDatabase,deleteTable } from '../index'\r\n\r\n/**\r\n * 删除所有表\r\n * @param dbName 数据库名称\r\n * @returns Promise对象，包含删除结果的状态和消息\r\n */\r\nasync function deleteAllTables(dbName: string): Promise<any> {\r\n  const database: any = await useDatabase(dbName)\r\n  let currentDb = database.result.target.result\r\n  const objectStoreNames = Array.from(currentDb?.objectStoreNames ?? [])\r\n\r\n  const deletePromises = objectStoreNames.map((tableName: any) =>\r\n    deleteTable(dbName, tableName)\r\n  )\r\n\r\n  return Promise.all(deletePromises)\r\n}\r\n\r\nexport default deleteAllTables\r\n","import ResponseMessages from '../../constant'\r\nimport { useDatabase } from '../index'\r\nimport { logger } from '../../utils/logger'\r\nimport { isTableExist, closeAllConnections } from '../../helper'\r\n\r\n/**\r\n * 索引类型枚举\r\n */\r\nexport enum IndexType {\r\n  UNIQUE = 'unique',      // 唯一索引\r\n  MULTI_ENTRY = 'multi',  // 多值索引\r\n  NORMAL = 'normal'       // 普通索引\r\n}\r\n\r\n/**\r\n * 索引配置接口\r\n */\r\ninterface IndexConfig {\r\n  name: string           // 索引字段名\r\n  type: IndexType        // 索引类型\r\n}\r\n\r\n/**\r\n * 表配置选项\r\n */\r\ninterface TableOptions {\r\n  primaryKey?: string                // 主键字段，默认 'id'\r\n  autoIncrement?: boolean            // 是否自增，默认 true\r\n  version?: number                   // 数据库版本号\r\n  indexes?: Array<string | IndexConfig>  // 支持字符串数组或配置数组\r\n  timeout?: number     // 超时时间,默认3000ms\r\n  force?: boolean      // 是否强制创建,默认true\r\n}\r\n\r\n/**\r\n * 创建数据库表\r\n * @description \r\n * 创建一个新的 IndexedDB 对象仓库并配置索引。\r\n * 支持唯一索引和多值索引。\r\n * \r\n * @example\r\n * ```typescript\r\n * // 创建用户表 - 简单方式\r\n * await createTable('myDB', 'users', {\r\n *   primaryKey: 'userId',\r\n *   indexes: ['email', 'name', 'tags'] // 默认为普通索引\r\n * })\r\n * \r\n * // 创建用户表 - 高级配置\r\n * await createTable('myDB', 'users', {\r\n *   primaryKey: 'userId',\r\n *   indexes: [\r\n *     'name',                          // 普通索引\r\n *     { \r\n *       name: 'email',\r\n *       type: IndexType.UNIQUE         // 唯一索引\r\n *     },\r\n *     {\r\n *       name: 'tags',\r\n *       type: IndexType.MULTI_ENTRY    // 多值索引，用于数组字段\r\n *     }\r\n *   ]\r\n * })\r\n * ```\r\n */\r\nasync function createTable(\r\n  dbName: string,\r\n  tableName: string,\r\n  options: TableOptions = {}\r\n): Promise<any> {\r\n  try {\r\n    const {\r\n      primaryKey = 'id',\r\n      autoIncrement = true,\r\n      indexes = [],\r\n      timeout = 3000,\r\n      force = true\r\n    } = options\r\n\r\n    // 参数验证\r\n    if (!dbName) return ResponseMessages.DBNAME_IS_NULL()\r\n    if (!tableName) return ResponseMessages.TBNAME_IS_NULL()\r\n\r\n    // 检查表是否存在\r\n    const exists = await isTableExist(dbName, tableName)\r\n    if (exists) return ResponseMessages.TB_EXIST(tableName)\r\n\r\n    // 获取数据库连接\r\n    const db = await useDatabase(dbName)\r\n    const newVersion = db.version + 1\r\n    db.close()\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const openRequest = window.indexedDB.open(dbName, newVersion)\r\n      let timeoutId: any\r\n\r\n      // 设置超时处理\r\n      if (timeout > 0) {\r\n        timeoutId = setTimeout(async () => {\r\n          if (force) {\r\n            try {\r\n              await closeAllConnections()\r\n              const retryRequest = window.indexedDB.open(dbName, newVersion)\r\n              setupHandlers(retryRequest)\r\n            } catch (err) {\r\n              reject(ResponseMessages.TB_CREATE_ERROR(err))\r\n            }\r\n          } else {\r\n            reject(ResponseMessages.TB_CREATE_ERROR('创建表超时'))\r\n          }\r\n        }, timeout)\r\n      }\r\n\r\n      const setupHandlers = (request: IDBOpenDBRequest) => {\r\n        request.onblocked = () => {\r\n          logger.warn('数据库升级被阻塞 - 等待其他连接关闭')\r\n          // 阻塞时不立即失败,等待超时或强制处理\r\n        }\r\n\r\n        request.onupgradeneeded = (event: any) => {\r\n          clearTimeout(timeoutId)\r\n          const database = event.target.result\r\n          try {\r\n            const store = database.createObjectStore(tableName, {\r\n              keyPath: primaryKey,\r\n              autoIncrement\r\n            })\r\n\r\n            indexes.forEach(index => {\r\n              const indexConfig: IDBIndexParameters = {}\r\n\r\n              if (typeof index === 'string') {\r\n                store.createIndex(index, index, indexConfig)\r\n                logger.debug(`创建普通索引: ${index}`)\r\n              } else {\r\n                switch (index.type) {\r\n                  case IndexType.UNIQUE:\r\n                    indexConfig.unique = true\r\n                    break\r\n                  case IndexType.MULTI_ENTRY:\r\n                    indexConfig.multiEntry = true\r\n                    break\r\n                  case IndexType.NORMAL:\r\n                    break\r\n                }\r\n\r\n                store.createIndex(index.name, index.name, indexConfig)\r\n                logger.debug(`创建${index.type}索引: ${index.name}`)\r\n              }\r\n            })\r\n\r\n            logger.debug(`表 ${tableName} 创建成功，共创建 ${indexes.length} 个索引`)\r\n          } catch (error) {\r\n            logger.error(`创建表 ${tableName} 失败:`, error)\r\n            reject(ResponseMessages.TB_CREATE_ERROR(error))\r\n          }\r\n        }\r\n\r\n        request.onsuccess = (event: any) => {\r\n          clearTimeout(timeoutId)\r\n          const database = event.target.result\r\n          database.close()\r\n          resolve(ResponseMessages.TB_CREATE_SUCCESS())\r\n        }\r\n\r\n        request.onerror = (event: any) => {\r\n          clearTimeout(timeoutId)\r\n          logger.error('创建表失败:', event.target.error)\r\n          reject(ResponseMessages.TB_CREATE_ERROR(event.target.error))\r\n        }\r\n      }\r\n\r\n      setupHandlers(openRequest)\r\n    })\r\n\r\n  } catch (error) {\r\n    logger.error('创建表失败:', error)\r\n    return ResponseMessages.TB_CREATE_ERROR(error)\r\n  }\r\n}\r\n\r\nexport default createTable\r\n","import ResponseMessages from '../../constant'\r\nimport { isTableExist } from '../../helper'\r\nimport { useDatabase } from '../index'\r\n\r\n// 插入一条数据到指定表\r\nasync function insertOne<T extends object>(\r\n  dbName: string, \r\n  tableName: string, \r\n  data: T\r\n): Promise<any> {\r\n  // 检查数据库名称是否为空\r\n  if (!dbName) {\r\n    return ResponseMessages.DBNAME_IS_NULL()\r\n  }\r\n\r\n  // 检查表是否存在\r\n  const tableExist = await isTableExist(dbName, tableName)\r\n  if (!tableExist) {\r\n    return ResponseMessages.TB_NOTFOUND()\r\n  }\r\n\r\n  // 使用指定的数据库\r\n  const db = await useDatabase(dbName)\r\n\r\n  // 返回一个新的Promise\r\n  return new Promise<any>((resolve, reject) => {\r\n    // 开启一个读写事务\r\n    const transaction = db.transaction([tableName], 'readwrite')\r\n    const store = transaction.objectStore(tableName)\r\n\r\n    // 获取主键名\r\n    const keyPath = store.keyPath as string\r\n    \r\n    // 如果数据中没有主键，且是自增主键，则不添加id\r\n    // 如果数据中没有主键，且不是自增主键，则添加id\r\n    let finalData: T\r\n    if (!(keyPath in data)) {\r\n      if (!store.autoIncrement) {\r\n        finalData = { \r\n          [keyPath]: Date.now(),\r\n          ...data \r\n        } as T\r\n      } else {\r\n        finalData = data\r\n      }\r\n    } else {\r\n      finalData = data\r\n    }\r\n\r\n    // 添加数据\r\n    const request = store.add(finalData)\r\n\r\n    // 成功时的处理\r\n    request.onsuccess = (event: any) => {\r\n      resolve(ResponseMessages.TB_INSERT_SUCCESS(event))\r\n    }\r\n\r\n    // 失败时的处理\r\n    request.onerror = (event: any) => {\r\n      reject(ResponseMessages.TB_INSERT_ERROR(event))\r\n    }\r\n  })\r\n}\r\n\r\nexport default insertOne\r\n","import { useDatabase } from '../index'\r\nimport ResponseMessages from '../../constant'\r\n// import { any } from './types'\r\n\r\n/**\r\n * 批量插入数据\r\n * @param dbName 数据库名称\r\n * @param tableName 表名\r\n * @param data 要插入的数据数组\r\n * @param options 插入选项\r\n * @returns Promise<any>\r\n */\r\nexport async function insertMany(\r\n  dbName: string,\r\n  tableName: string,\r\n  data: any[],\r\n  options: {\r\n    skipDuplicates?: boolean;  // 是否跳过重复键\r\n    updateDuplicates?: boolean;  // 是否更新重复键\r\n  } = {}\r\n): Promise<any> {\r\n  const result: any = {\r\n    success: true,\r\n    inserted: 0,\r\n    failed: 0,\r\n    errors: []\r\n  }\r\n\r\n  try {\r\n    const db = await useDatabase(dbName)\r\n    const transaction = db.transaction([tableName], 'readwrite')\r\n    const store = transaction.objectStore(tableName)\r\n\r\n    // 使用Promise.all处理所有插入操作\r\n    await Promise.all(data.map(async (item) => {\r\n      try {\r\n        // 获取主键名\r\n        const keyPath = store.keyPath as string;\r\n\r\n        // 如果数据中没有主键，且是自增主键，则不添加id\r\n        // 如果数据中没有主键，且不是自增主键，则添加id\r\n        let finalData: any;\r\n        if (!(keyPath in item)) {\r\n          if (!store.autoIncrement) {\r\n            finalData = { \r\n              [keyPath]: Date.now(),\r\n              ...item \r\n            };\r\n          } else {\r\n            finalData = item;\r\n          }\r\n        } else {\r\n          finalData = item;\r\n        }\r\n\r\n        if (options.updateDuplicates) {\r\n          // 如果选择更新重复项，使用put\r\n          await new Promise((resolve, reject) => {\r\n            const request = store.put(finalData)\r\n            request.onsuccess = () => resolve(undefined)\r\n            request.onerror = () => reject(request.error)\r\n          })\r\n        } else {\r\n          // 否则使用add，可能会抛出重复键错误\r\n          await new Promise((resolve, reject) => {\r\n            const request = store.add(finalData)\r\n            request.onsuccess = () => resolve(undefined)\r\n            request.onerror = (event) => {\r\n              const error = request.error\r\n              if (error?.name === 'ConstraintError' && options.skipDuplicates) {\r\n                // 如果是重复键错误且设置了跳过重复，则忽略错误\r\n                resolve(undefined)\r\n              } else {\r\n                reject(error)\r\n              }\r\n            }\r\n          })\r\n        }\r\n        result.inserted++\r\n      } catch (error) {\r\n        result.failed++\r\n        result.errors.push({\r\n          item,\r\n          error: error instanceof Error ? error.message : String(error)\r\n        })\r\n        if (!options.skipDuplicates && !options.updateDuplicates) {\r\n          throw error // 如果没有设置跳过或更新重复项，则抛出错误\r\n        }\r\n      }\r\n    }))\r\n\r\n    return ResponseMessages.TB_INSERT_SUCCESS(result)\r\n  } catch (error) {\r\n    result.success = false\r\n    return ResponseMessages.TB_INSERT_ERROR(error)\r\n  }\r\n}\r\n\r\nexport default insertMany\r\n","import ResponseMessages from '../../constant'\r\nimport { isTableExist } from '../../helper'\r\nimport { useDatabase } from '../index'\r\nimport { logger } from '../../utils/logger'\r\n\r\ninterface TableData {\r\n  tableName: string\r\n  version: string | number\r\n  children: any\r\n}\r\n\r\n/**\r\n * 查询指定数据库中的数据，如果提供了表名，则查询该表的数据；如果未提供表名，则查询所有表的数据。\r\n * @async\r\n * @param {string} dbName - 数据库名称\r\n * @param {string} [tableName] - 可选，表名。如果提供了表名，则查询该表的数据；如果未提供表名，则查询所有表的数据\r\n * @returns {Promise<TableData[] | IReturn>} 返回包含查询结果的Promise对象\r\n */\r\nasync function findDBData(dbName: string, tableName?: string): Promise<TableData[] | any> {\r\n  if (!dbName) {\r\n    return ResponseMessages.DBNAME_IS_NULL()\r\n  }\r\n\r\n  try {\r\n    const database = await useDatabase(dbName)\r\n    const result: TableData[] = []\r\n\r\n    // 查询单个表数据的函数\r\n    const queryTableData = async (storeName: string): Promise<TableData | null> => {\r\n      try {\r\n        const transaction = database.transaction([storeName], 'readonly')\r\n        const store = transaction.objectStore(storeName)\r\n\r\n        const data = await new Promise((resolve, reject) => {\r\n          const request = store.getAll()\r\n          request.onsuccess = () => resolve(request.result)\r\n          request.onerror = (event) => reject(event)\r\n        })\r\n\r\n        return {\r\n          tableName: storeName,\r\n          version: database.version || '',\r\n          children: ResponseMessages.TB_SELECT_SUCCESS(data)\r\n        }\r\n      } catch (error) {\r\n        logger.error(`查询表 ${storeName} 数据失败:`, error)\r\n        return null\r\n      }\r\n    }\r\n\r\n    // 查询单个表的数据\r\n    if (tableName) {\r\n      const tableExist = await isTableExist(dbName, tableName)\r\n      if (!tableExist) {\r\n        return ResponseMessages.TB_NOTFOUND()\r\n      }\r\n\r\n      const tableData = await queryTableData(tableName)\r\n      if (tableData) {\r\n        result.push(tableData)\r\n      }\r\n      return result\r\n    }\r\n\r\n    // 查询所有表的数据\r\n    const objectStoreNames = Array.from(database.objectStoreNames || [])\r\n    if (objectStoreNames.length === 0) {\r\n      return []\r\n    }\r\n\r\n    // 并行查询所有表的数据\r\n    const tableDataPromises = objectStoreNames.map(async (storeName) => {\r\n      if (!database.objectStoreNames.contains(storeName)) {\r\n        logger.warn(`表 ${storeName} 不存在`)\r\n        return null\r\n      }\r\n      return queryTableData(storeName)\r\n    })\r\n\r\n    const tableDataResults = await Promise.all(tableDataPromises)\r\n    \r\n    // 过滤掉查询失败的表数据\r\n    result.push(...tableDataResults.filter((data): data is TableData => data !== null))\r\n\r\n    return result\r\n\r\n  } catch (error) {\r\n    logger.error('查询数据库数据失败:', error)\r\n    return ResponseMessages.BASIC_ERROR(error)\r\n  }\r\n}\r\n\r\nexport default findDBData","import ResponseMessages from '../../constant'\r\nimport { isTableExist } from '../../helper'\r\nimport { useDatabase } from '../index'\r\n\r\n// import {ExportConverter} from \"typedoc/dist/lib/converter/nodes\";\r\n\r\n/**\r\n * 根据主键查询数据或查询所有数据\r\n * @param dbName 数据库名称\r\n * @param tableName 表名称\r\n * @param key 主键值\r\n * @param isAll 是否查询所有数据，默认为 true\r\n * @returns Promise对象，包含查询结果对象\r\n */\r\nasync function findByKey(\r\n  dbName: string,\r\n  tableName: string,\r\n  key: any,\r\n  isAll: boolean = true\r\n): Promise<any> {\r\n  if (!dbName) {\r\n    return ResponseMessages.DBNAME_IS_NULL()\r\n  }\r\n  if (!tableName) {\r\n    return ResponseMessages.TBNAME_IS_NULL()\r\n  }\r\n  if (!key && !isAll) {\r\n    return ResponseMessages.PRIMARY_KEY_IS_NULL()\r\n  }\r\n  try {\r\n    const tableExist = await isTableExist(dbName, tableName)\r\n    if (!tableExist) {\r\n      return ResponseMessages.TB_NOTFOUND()\r\n    }\r\n    const db = await useDatabase(dbName)\r\n\r\n    return new Promise<any>((resolve, reject) => {\r\n      const store = db.transaction(tableName, 'readonly').objectStore(tableName)\r\n\r\n      if (isAll) {\r\n        const request = store.getAll()\r\n        request.onsuccess = (event: any) => {\r\n          const result = event.target.result\r\n          resolve(ResponseMessages.TB_SELECT_BY_KEY_SUCCESS(result))\r\n        }\r\n        request.onerror = (event: any) => {\r\n          reject(ResponseMessages.TB_SELECT_BY_KEY_ERROR(event))\r\n        }\r\n      } else {\r\n        const request = store.get(key)\r\n        request.onsuccess = (event: any) => {\r\n          const result = event.target.result\r\n          resolve(ResponseMessages.TB_SELECT_BY_KEY_SUCCESS(result))\r\n        }\r\n        request.onerror = (event: any) => {\r\n          reject(ResponseMessages.TB_SELECT_BY_KEY_ERROR(event))\r\n        }\r\n      }\r\n    })\r\n  } catch (error) {\r\n    return ResponseMessages.BASIC_ERROR(error)\r\n  }\r\n}\r\n\r\nexport default findByKey\r\n","import ResponseMessages from '../../constant'\r\nimport { isTableExist } from '../../helper'\r\nimport { useDatabase } from '../index'\r\n\r\n/**\r\n * 根据索引查询数据\r\n * @param dbName 数据库名称\r\n * @param tableName 表名称\r\n * @param indexName 索引名称\r\n * @param indexValue 索引值\r\n * @param isAll 根据索引查询出来的值,查出来全部值还是默认第一条\r\n * @returns Promise对象，包含查询结果对象\r\n */\r\nasync function findByIndex(\r\n  dbName: string,\r\n  tableName: string,\r\n  indexName: string,\r\n  indexValue: any,\r\n  isAll: boolean = true\r\n): Promise<any> {\r\n  if (!dbName) {\r\n    return ResponseMessages.DBNAME_IS_NULL()\r\n  }\r\n  if (!tableName) {\r\n    return ResponseMessages.TBNAME_IS_NULL()\r\n  }\r\n\r\n  if (!indexName) {\r\n    return ResponseMessages.TB_SELECT_INDEX_NAME_IS_NULL()\r\n  }\r\n\r\n  if (!indexValue) {\r\n    return ResponseMessages.TB_SELECT_INDEX_VALUE_IS_NULL()\r\n  }\r\n  try {\r\n    const tableExist = await isTableExist(dbName, tableName)\r\n    if (!tableExist) {\r\n      return ResponseMessages.TB_EXIST(`${tableName} 表不存在`)\r\n    }\r\n    const db = await useDatabase(dbName)\r\n\r\n    return new Promise<any>((resolve, reject) => {\r\n      const store = db.transaction(tableName, 'readonly').objectStore(tableName)\r\n\r\n      if (!Array.from(store.indexNames).includes(indexName))\r\n        reject(ResponseMessages.TB_INDEX_ERROR())\r\n\r\n      const index = store.index(indexName)\r\n\r\n      if (isAll) {\r\n        const request = index.openCursor(IDBKeyRange.only(indexValue))\r\n        const results: any[] = []\r\n\r\n        request.onsuccess = (event: any) => {\r\n          const cursor = event.target.result\r\n          if (cursor) {\r\n            results.push(cursor.value)\r\n            cursor.continue()\r\n          } else {\r\n            resolve(ResponseMessages.TB_SELECT_BY_INDEX_SUCCESS(results))\r\n          }\r\n        }\r\n\r\n        request.onerror = (event: any) => {\r\n          reject(ResponseMessages.TB_SELECT_BY_INDEX_ERROR(event))\r\n        }\r\n      } else {\r\n        const request = index.get(indexValue)\r\n        request.onsuccess = (event: any) => {\r\n          const result = event.target.result\r\n          resolve(ResponseMessages.TB_SELECT_BY_INDEX_SUCCESS(result))\r\n        }\r\n\r\n        request.onerror = (event: any) => {\r\n          reject(ResponseMessages.TB_SELECT_BY_INDEX_ERROR(event))\r\n        }\r\n      }\r\n    })\r\n  } catch (error) {\r\n    return ResponseMessages.BASIC_ERROR(error)\r\n  }\r\n}\r\n\r\nexport default findByIndex\r\n","import ResponseMessages from '../../constant'\r\nimport { isTableExist } from '../../helper'\r\nimport { useDatabase } from '../index'\r\n\r\n/**\r\n * 根据主键删除单条数据\r\n * @param dbName 数据库名称\r\n * @param tableName 表名称\r\n * @param id 主键值\r\n * @returns Promise对象，包含删除结果的状态和消息\r\n */\r\nasync function deleteOneByPk(dbName: string, tableName: string, id: number) {\r\n  if (!dbName) {\r\n    return ResponseMessages.DBNAME_IS_NULL()\r\n  }\r\n  if (!tableName) {\r\n    return ResponseMessages.TBNAME_IS_NULL()\r\n  }\r\n  const tableExist = await isTableExist(dbName, tableName)\r\n  if (!tableExist) {\r\n    return ResponseMessages.TB_EXIST(`${tableName} 表不存在`)\r\n  }\r\n\r\n  try {\r\n    const db = await useDatabase(dbName)\r\n    return new Promise<any>((resolve, reject) => {\r\n      const store = db.transaction([tableName], 'readwrite').objectStore(tableName)\r\n\r\n      const request = store.delete(id)\r\n      request.onsuccess = (event: any) => {\r\n        resolve(ResponseMessages.TB_DELETE_BY_PK_SUCCESS(event))\r\n      }\r\n      request.onerror = (event: any) => {\r\n        reject(ResponseMessages.TB_DELETE_BY_PK_ERROR(event))\r\n      }\r\n    })\r\n  } catch (error) {\r\n    return ResponseMessages.BASIC_ERROR(error)\r\n  }\r\n}\r\n\r\nexport default deleteOneByPk\r\n","import ResponseMessages from '../../constant'\r\nimport { isTableExist } from '../../helper'\r\nimport { useDatabase } from '../index'\r\n\r\n/**\r\n * 根据索引删除单条数据\r\n * @param dbName 数据库名称\r\n * @param tableName 表名称\r\n * @param indexName 索引名称\r\n * @param indexValue 索引值\r\n * @returns Promise对象，包含删除结果的状态和消息\r\n */\r\nasync function deleteOneByIndex(\r\n  dbName: string,\r\n  tableName: string,\r\n  indexName: string,\r\n  indexValue: any\r\n): Promise<any> {\r\n  if (!dbName) {\r\n    return ResponseMessages.DBNAME_IS_NULL()\r\n  }\r\n  if (!tableName) {\r\n    return ResponseMessages.TBNAME_IS_NULL()\r\n  }\r\n  if (!indexName) {\r\n    return ResponseMessages.TB_SELECT_INDEX_NAME_IS_NULL()\r\n  }\r\n  if (!indexValue) {\r\n    return ResponseMessages.TB_SELECT_INDEX_VALUE_IS_NULL()\r\n  }\r\n\r\n  const tableExist = await isTableExist(dbName, tableName)\r\n  if (!tableExist) {\r\n    return ResponseMessages.TB_EXIST(`${tableName} 表不存在`)\r\n  }\r\n\r\n  try {\r\n    const db = await useDatabase(dbName)\r\n\r\n    return new Promise<any>((resolve, reject) => {\r\n      const transaction = db.transaction([tableName], 'readwrite')\r\n      const store = transaction.objectStore(tableName)\r\n      const index = store.index(indexName)\r\n\r\n      const request = index.openCursor(IDBKeyRange.only(indexValue))\r\n      request.onsuccess = (event: any) => {\r\n        const cursor = event.target.result\r\n        if (cursor) {\r\n          const deleteRequest = cursor.delete()\r\n          deleteRequest.onsuccess = () => {\r\n            resolve(ResponseMessages.TB_DELETE_BY_INDEX_SUCCESS({ id: cursor.primaryKey }))\r\n          }\r\n          deleteRequest.onerror = (event: any) => {\r\n            reject(ResponseMessages.TB_DELETE_BY_INDEX_ERROR(event))\r\n          }\r\n        } else {\r\n          resolve(ResponseMessages.TB_DELETE_BY_INDEX_SUCCESS(null))\r\n        }\r\n      }\r\n\r\n      request.onerror = (event: any) => {\r\n        reject(ResponseMessages.TB_DELETE_BY_INDEX_ERROR(event))\r\n      }\r\n    })\r\n  } catch (error) {\r\n    return ResponseMessages.BASIC_ERROR(error)\r\n  }\r\n}\r\n\r\nexport default deleteOneByIndex\r\n","import ResponseMessages from '../../constant'\r\nimport { isTableExist } from '../../helper'\r\nimport { useDatabase } from '../index'\r\n\r\n/**\r\n * 根据主键数组批量删除数据\r\n * @param dbName 数据库名称\r\n * @param tableName 表名称\r\n * @param keys 主键值数组\r\n * @returns Promise对象，包含删除结果的状态和消息\r\n */\r\nasync function deleteManyByPK(dbName: string, tableName: string, keys: any[]): Promise<any> {\r\n  if (!dbName) {\r\n    return ResponseMessages.DBNAME_IS_NULL()\r\n  }\r\n  if (!tableName) {\r\n    return ResponseMessages.TBNAME_IS_NULL()\r\n  }\r\n  if (!keys || keys.length === 0) {\r\n    return ResponseMessages.PRIMARY_KEY_IS_NULL()\r\n  }\r\n\r\n  const tableExist = await isTableExist(dbName, tableName)\r\n  if (!tableExist) {\r\n    return ResponseMessages.TB_NOTFOUND()\r\n  }\r\n\r\n  try {\r\n    const db = await useDatabase(dbName)\r\n\r\n    return new Promise<any>((resolve, reject) => {\r\n      const store = db.transaction([tableName], 'readwrite').objectStore(tableName)\r\n\r\n      const deletePromises = keys.map(key => {\r\n        return new Promise<void>((resolve, reject) => {\r\n          const request = store.delete(key)\r\n          request.onsuccess = () => resolve()\r\n          request.onerror = (event: any) =>\r\n            reject(ResponseMessages.TB_DELETE_BY_PK_ERROR(event.target.error))\r\n        })\r\n      })\r\n\r\n      Promise.all(deletePromises)\r\n        .then(() =>\r\n          resolve(\r\n            ResponseMessages.TB_DELETE_BY_PK_SUCCESS(`${keys.length} 条数据删除成功`)\r\n          )\r\n        )\r\n        .catch(error => reject(ResponseMessages.TB_DELETE_BY_PK_ERROR(error)))\r\n    })\r\n  } catch (error) {\r\n    return ResponseMessages.BASIC_ERROR(error)\r\n  }\r\n}\r\n\r\nexport default deleteManyByPK\r\n","import ResponseMessages from '../../constant'\r\nimport { isTableExist } from '../../helper'\r\nimport { useDatabase } from '../index'\r\n\r\n/**\r\n * 根据索引批量删除数据\r\n * @param dbName 数据库名称\r\n * @param tableName 表名称\r\n * @param indexName 索引名称\r\n * @param indexValues 索引值数组\r\n * @returns Promise对象，包含删除结果的状态和消息\r\n */\r\nasync function deleteManyByIndex(\r\n  dbName: string,\r\n  tableName: string,\r\n  indexName: string,\r\n  indexValues: any[]\r\n): Promise<any> {\r\n  if (!dbName) {\r\n    return ResponseMessages.DBNAME_IS_NULL();\r\n  }\r\n  if (!tableName) {\r\n    return ResponseMessages.TBNAME_IS_NULL();\r\n  }\r\n  const tableExist = await isTableExist(dbName, tableName);\r\n  if (!tableExist) {\r\n    return ResponseMessages.TB_EXIST(`${tableName} 表不存在`);\r\n  }\r\n\r\n  try {\r\n    const db = await useDatabase(dbName);\r\n\r\n    return new Promise<any>((resolve, reject) => {\r\n      const store = db.transaction([tableName], 'readwrite').objectStore(tableName);\r\n      const index = store.index(indexName);\r\n\r\n      const deletePromises = indexValues.map(value => {\r\n        return new Promise<any>((resolve, reject) => {\r\n          const request = index.openCursor(IDBKeyRange.only(value));\r\n          request.onsuccess = (event: any) => {\r\n            const cursor = event.target.result;\r\n            if (cursor) {\r\n              const deleteRequest = cursor.delete();\r\n              deleteRequest.onsuccess = () => {\r\n                cursor.continue();\r\n                resolve(true);\r\n              };\r\n              deleteRequest.onerror = (event: any) =>\r\n                reject({\r\n                  code: 400,\r\n                  message: event.target.error\r\n                });\r\n            } else {\r\n              resolve(true);\r\n            }\r\n          };\r\n          request.onerror = (event: any) =>\r\n            reject({\r\n              code: 400,\r\n              message: event.target.error\r\n            });\r\n        });\r\n      });\r\n\r\n      Promise.all(deletePromises)\r\n        .then(() =>\r\n          resolve(\r\n            ResponseMessages.TB_DELETE_MANY_BY_INDEXS_SUCCESS(\r\n              `${indexValues.length} 条数据删除成功`\r\n            )\r\n          )\r\n        )\r\n        .catch(error => reject(ResponseMessages.TB_DELETE_MANY_BY_INDEXS_ERROR(error)));\r\n    });\r\n  } catch (error) {\r\n    return ResponseMessages.BASIC_ERROR(error);\r\n  }\r\n}\r\n\r\nexport default deleteManyByIndex\r\n","import ResponseMessages from '../../constant'\r\nimport { isTableExist } from '../../helper'\r\nimport { useDatabase } from '../index'\r\n\r\n/**\r\n * 更新指定主键的数据\r\n * @param dbName 数据库名称\r\n * @param tbName 表名称\r\n * @param id 主键值\r\n * @param data 更新的数据\r\n * @returns Promise对象，包含更新结果\r\n */\r\nasync function updateDataByPrimaryKey<T extends { [key: string]: any }>(\r\n  dbName: string,\r\n  tbName: string,\r\n  id: number,\r\n  data: Partial<T>\r\n): Promise<any> {\r\n  if (!dbName) {\r\n    return ResponseMessages.DBNAME_IS_NULL();\r\n  }\r\n  if (!id) {\r\n    return ResponseMessages.PRIMARY_KEY_IS_NULL();\r\n  }\r\n\r\n  const tableExist = await isTableExist(dbName, tbName);\r\n  if (!tableExist) {\r\n    return ResponseMessages.TB_NOTFOUND(`${tbName} 表不存在` as any);\r\n  }\r\n\r\n  try {\r\n    const db = await useDatabase(dbName);\r\n\r\n    return new Promise<any>((resolve, reject) => {\r\n      const store = db.transaction([tbName], 'readwrite').objectStore(tbName);\r\n      const request = store.get(id);\r\n\r\n      request.onsuccess = (event: Event) => {\r\n        const target = event.target as IDBRequest;\r\n        const item = target.result;\r\n        \r\n        if (item) {\r\n          const updatedItem = { ...item, ...data };\r\n          const updateRequest = store.put(updatedItem);\r\n\r\n          updateRequest.onsuccess = (event: Event) => {\r\n            resolve(ResponseMessages.TB_DATA_UPDATE_BY_PRIMARY_KEY_SUCCESS(event));\r\n          };\r\n\r\n          updateRequest.onerror = (event: Event) => {\r\n            reject(ResponseMessages.TB_DATA_UPDATE_BY_PRIMARY_KEY_ERROR(event));\r\n          };\r\n        } else {\r\n          reject(ResponseMessages.DATA_ERROR('找不到数据'));\r\n        }\r\n      };\r\n\r\n      request.onerror = (event: Event) => {\r\n        reject(ResponseMessages.TB_DATA_UPDATE_BY_PRIMARY_KEY_ERROR(event));\r\n      };\r\n    });\r\n  } catch (error) {\r\n    return ResponseMessages.BASIC_ERROR(error);\r\n  }\r\n}\r\n\r\nexport default updateDataByPrimaryKey;\r\n","import ResponseMessages from '../../constant'\r\nimport { isTableExist } from '../../helper'\r\nimport { useDatabase } from '../index'\r\n\r\n/**\r\n * 根据索引更新数据\r\n * @param dbName 数据库名称\r\n * @param tbName 表名称\r\n * @param indexName 索引名称\r\n * @param indexValue 索引值\r\n * @param data 更新的数据\r\n * @returns Promise对象，包含更新结果\r\n */\r\nasync function updateDataByIndex<T extends { [key: string]: any }>(\r\n  dbName: string,\r\n  tbName: string,\r\n  indexName: string,\r\n  indexValue: any,\r\n  data: Partial<T>\r\n): Promise<any> {\r\n  if (!dbName) {\r\n    return ResponseMessages.DBNAME_IS_NULL();\r\n  }\r\n  if (!indexName) {\r\n    return ResponseMessages.TB_SELECT_INDEX_NAME_IS_NULL();\r\n  }\r\n  if (!indexValue) {\r\n    return ResponseMessages.TB_SELECT_INDEX_VALUE_IS_NULL();\r\n  }\r\n\r\n  const tableExist = await isTableExist(dbName, tbName);\r\n  if (!tableExist) {\r\n    return ResponseMessages.TB_NOTFOUND();\r\n  }\r\n\r\n  try {\r\n    const db = await useDatabase(dbName);\r\n\r\n    return new Promise<any>((resolve, reject) => {\r\n      const store = db.transaction([tbName], 'readwrite').objectStore(tbName);\r\n      const index = store.index(indexName);\r\n      const request = index.get(indexValue);\r\n\r\n      request.onsuccess = (event: Event) => {\r\n        const target = event.target as IDBRequest;\r\n        const item = target.result;\r\n        \r\n        if (item) {\r\n          const updatedItem = { ...item, ...data };\r\n          const updateRequest = store.put(updatedItem);\r\n\r\n          updateRequest.onsuccess = (event: Event) => {\r\n            resolve(ResponseMessages.TB_DATA_UPDATE_BY_INDEX_SUCCESS(event));\r\n          };\r\n\r\n          updateRequest.onerror = (event: Event) => {\r\n            reject(ResponseMessages.TB_DATA_UPDATE_BY_INDEX_ERROR(event));\r\n          };\r\n        } else {\r\n          reject(ResponseMessages.DATA_ERROR('找不到数据'));\r\n        }\r\n      };\r\n\r\n      request.onerror = (event: Event) => {\r\n        reject(ResponseMessages.TB_DATA_UPDATE_BY_INDEX_ERROR(event));\r\n      };\r\n    });\r\n  } catch (error) {\r\n    return ResponseMessages.BASIC_ERROR(error);\r\n  }\r\n}\r\n\r\nexport default updateDataByIndex;\r\n","import { useDatabase } from '../index'\r\nimport ResponseMessages from '../../constant'\r\nimport { logger } from '../../utils/logger'\r\n\r\ninterface WhereClause {\r\n  field: string\r\n  operator: string\r\n  value: any\r\n}\r\n\r\ninterface OrderByClause {\r\n  field: string\r\n  direction: 'asc' | 'desc'\r\n}\r\n\r\ninterface QueryConfig {\r\n  select?: string[]\r\n  where?: Array<{\r\n    field: string\r\n    operator: string\r\n    value: any\r\n  }>\r\n  orderBy?: Array<{\r\n    field: string\r\n    direction: 'asc' | 'desc'\r\n  }>\r\n  limit?: number\r\n  offset?: number\r\n}\r\n\r\nexport class QueryBuilder {\r\n  private dbName: string\r\n  private tableName: string\r\n  private selectedFields: string[] = []\r\n  private whereConditions: WhereClause[] = []\r\n  private orderByClauses: OrderByClause[] = []\r\n  private limitValue?: number\r\n  private offsetValue?: number\r\n\r\n  constructor(dbName: string, tableName: string) {\r\n    this.dbName = dbName\r\n    this.tableName = tableName\r\n  }\r\n\r\n  // 链式查询方法\r\n  select(...fields: string[]) {\r\n    this.selectedFields = fields.length ? fields : ['*']\r\n    return this\r\n  }\r\n\r\n  where(field: string, operator: string, value: any) {\r\n    this.whereConditions.push({ field, operator, value })\r\n    return this\r\n  }\r\n\r\n  orderBy(field: string, direction: 'asc' | 'desc' = 'asc') {\r\n    this.orderByClauses.push({ field, direction })\r\n    return this\r\n  }\r\n\r\n  limit(value: number) {\r\n    this.limitValue = value\r\n    return this\r\n  }\r\n\r\n  offset(value: number) {\r\n    this.offsetValue = value\r\n    return this\r\n  }\r\n\r\n  // 配置查询方法\r\n  setConfig(config: QueryConfig) {\r\n    if (config.select) {\r\n      this.selectedFields = config.select\r\n    }\r\n    if (config.where) {\r\n      this.whereConditions = config.where\r\n    }\r\n    if (config.orderBy) {\r\n      this.orderByClauses = config.orderBy\r\n    }\r\n    if (config.limit !== undefined) {\r\n      this.limitValue = config.limit\r\n    }\r\n    if (config.offset !== undefined) {\r\n      this.offsetValue = config.offset\r\n    }\r\n    return this\r\n  }\r\n\r\n  // 执行查询\r\n  async execute(): Promise<any> {\r\n    try {\r\n      const db = await useDatabase(this.dbName)\r\n      const transaction = db.transaction([this.tableName], 'readonly')\r\n      const store = transaction.objectStore(this.tableName)\r\n\r\n      return new Promise((resolve, reject) => {\r\n        const request = store.getAll()\r\n\r\n        request.onsuccess = () => {\r\n          try {\r\n            let results = request.result\r\n\r\n            // 应用where条件\r\n            if (this.whereConditions.length) {\r\n              results = this.applyWhereConditions(results)\r\n            }\r\n\r\n            // 应用orderBy\r\n            if (this.orderByClauses.length) {\r\n              results = this.applyOrderBy(results)\r\n            }\r\n\r\n            // 应用select\r\n            if (this.selectedFields.length && !this.selectedFields.includes('*')) {\r\n              results = results.map(item => {\r\n                const selected: any = {}\r\n                this.selectedFields.forEach(field => {\r\n                  if (field in item) {\r\n                    selected[field] = item[field]\r\n                  }\r\n                })\r\n                return selected\r\n              })\r\n            }\r\n\r\n            // 应用分页\r\n            if (this.offsetValue !== undefined) {\r\n              results = results.slice(this.offsetValue)\r\n            }\r\n            if (this.limitValue !== undefined) {\r\n              results = results.slice(0, this.limitValue)\r\n            }\r\n\r\n            resolve(ResponseMessages.TB_SELECT_SUCCESS(results))\r\n          } catch (error) {\r\n            reject(ResponseMessages.TB_SELECT_ERROR(error))\r\n          }\r\n        }\r\n\r\n        request.onerror = () => {\r\n          reject(ResponseMessages.TB_SELECT_ERROR(request.error))\r\n        }\r\n      })\r\n    } catch (error) {\r\n      logger.error('Query execution failed:', error)\r\n      return ResponseMessages.TB_SELECT_ERROR(error)\r\n    }\r\n  }\r\n\r\n  private applyWhereConditions(results: any[]): any[] {\r\n    return results.filter(item => {\r\n      return this.whereConditions.every(({ field, operator, value }) => {\r\n        const itemValue = item[field]\r\n        switch (operator) {\r\n          case '=':\r\n            return itemValue === value\r\n          case '!=':\r\n            return itemValue !== value\r\n          case '>':\r\n            return itemValue > value\r\n          case '>=':\r\n            return itemValue >= value\r\n          case '<':\r\n            return itemValue < value\r\n          case '<=':\r\n            return itemValue <= value\r\n          case 'between':\r\n            return itemValue >= value[0] && itemValue <= value[1]\r\n          case 'in':\r\n            return value.includes(itemValue)\r\n          case 'like':\r\n            if (typeof itemValue !== 'string') return false\r\n            const pattern = value.replace(/%/g, '.*')\r\n            return new RegExp(`^${pattern}$`).test(itemValue)\r\n          default:\r\n            return false\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  private applyOrderBy(results: any[]): any[] {\r\n    return [...results].sort((a, b) => {\r\n      for (const { field, direction } of this.orderByClauses) {\r\n        if (a[field] < b[field]) return direction === 'asc' ? -1 : 1\r\n        if (a[field] > b[field]) return direction === 'asc' ? 1 : -1\r\n      }\r\n      return 0\r\n    })\r\n  }\r\n} ","import { QueryBuilder } from './QueryBuilder'\r\n\r\n/**\r\n * 创建查询构建器\r\n * @description \r\n * 创建一个新的查询构建器实例，用于构建数据库查询。\r\n * 支持链式调用和配置对象两种方式。\r\n * \r\n * @param dbName 数据库名称\r\n * @param tableName 表名称\r\n * @returns QueryBuilder 实例\r\n * \r\n * @example\r\n * ```typescript\r\n * // 链式调用\r\n * const results = await createQuery('myDB', 'users')\r\n *   .select('name', 'email')\r\n *   .where('age', '>', 18)\r\n *   .orderBy('name', 'asc')\r\n *   .limit(10)\r\n *   .execute()\r\n * \r\n * // 配置对象方式\r\n * const results = await createQuery('myDB', 'users')\r\n *   .setConfig({\r\n *     select: ['name', 'email'],\r\n *     where: [{ field: 'age', operator: '>', value: 18 }],\r\n *     orderBy: [{ field: 'name', direction: 'asc' }],\r\n *     limit: 10\r\n *   })\r\n *   .execute()\r\n * ```\r\n */\r\nexport function createQuery(dbName: string, tableName: string): QueryBuilder {\r\n  return new QueryBuilder(dbName, tableName)\r\n}\r\n\r\n","import ResponseMessages from '../../constant'\r\nimport { useDatabase } from '../index'\r\nimport { logger } from '../../utils/logger'\r\nimport { isTableExist } from '../../helper'\r\nimport { createTable } from '../table'\r\n\r\ninterface SaveFileOptions {\r\n  generateThumbnail?: boolean  // 是否生成缩略图，仅对图片有效，默认 false\r\n  thumbnailSize?: number       // 缩略图尺寸，默认 100px\r\n  generateUrl?: boolean        // 是否生成URL，默认 true\r\n}\r\n\r\ninterface FileBaseInfo {\r\n  name: string           // 文件名\r\n  type: string           // 文件类型\r\n  size: number          // 文件大小\r\n  lastModified: number  // 最后修改时间\r\n  width?: number        // 图片宽度\r\n  height?: number       // 图片高度\r\n  fileShortId: string   // 文件短标识\r\n  downloadToken: string // 下载令牌\r\n  url?: string          // 文件URL\r\n  thumbnail?: string    // 缩略图\r\n  thumbnailUrl?: string // 缩略图URL\r\n  compressed?: boolean  // 是否已压缩\r\n  compressedSize?: number // 压缩后大小\r\n  processedAt: number   // 处理时间\r\n  processMethod?: string // 处理方法\r\n}\r\n\r\ninterface FileData {\r\n  id?: number                // 文件ID，自增主键\r\n  name: string              // 文件名，用于快速访问\r\n  url?: string              // 默认URL(原始文件URL)\r\n  rawFileInfo: FileBaseInfo & {\r\n    file: File              // 原始文件对象\r\n    blob?: Blob             // 原始Blob对象\r\n  }\r\n  handleFileInfo: FileBaseInfo & {\r\n    blob?: Blob             // 处理后的Blob对象\r\n  }\r\n}\r\n\r\n/**\r\n * 保存文件到数据库\r\n * @description 自动检查并创建数据库表，然后保存文件。支持图片缩略图、文件压缩等处理。\r\n */\r\nasync function saveFilesToDB(\r\n  dbName: string,\r\n  tableName: string,\r\n  file: File,\r\n  options: SaveFileOptions = {\r\n    generateUrl: true,\r\n    generateThumbnail: false,\r\n    thumbnailSize: 100\r\n  }\r\n): Promise<any> {\r\n  try {\r\n    // 参数验证\r\n    if (!dbName) return ResponseMessages.DBNAME_IS_NULL()\r\n    if (!tableName) return ResponseMessages.TBNAME_IS_NULL()\r\n    if (!file) return ResponseMessages.BASIC_ERROR('文件不能为空')\r\n\r\n    // 检查表是否存在，不存在则创建\r\n    const exists = await isTableExist(dbName, tableName)\r\n    if (!exists) {\r\n      await createTable(dbName, tableName, {\r\n        primaryKey: 'id',\r\n        autoIncrement: true,\r\n        indexes: ['name']\r\n      })\r\n    }\r\n\r\n    // 准备共享信息\r\n    const now = Date.now()\r\n    const fileShortId = generateFileShortId()\r\n    const downloadToken = generateDownloadToken()\r\n\r\n    // 准备基础文件信息\r\n    const baseInfo: FileBaseInfo = {\r\n      name: file.name,\r\n      type: file.type,\r\n      size: file.size,\r\n      lastModified: file.lastModified,\r\n      processedAt: now,\r\n      fileShortId,\r\n      downloadToken\r\n    }\r\n\r\n    // 如果需要生成URL\r\n    if (options.generateUrl) {\r\n      baseInfo.url = URL.createObjectURL(file)\r\n    }\r\n\r\n    // 准备文件数据结构\r\n    const fileData: FileData = {\r\n      name: file.name,\r\n      url: URL.createObjectURL(file),\r\n      rawFileInfo: {\r\n        ...baseInfo,\r\n        file,\r\n        blob: file,\r\n        url: URL.createObjectURL(file)\r\n      },\r\n      handleFileInfo: {\r\n        ...baseInfo,\r\n        url: URL.createObjectURL(file)\r\n      }\r\n    }\r\n\r\n    // 如果是图片，处理图片相关信息\r\n    if (file.type.startsWith('image/')) {\r\n      const dimensions = await getImageDimensions(file)\r\n      const imageInfo = {\r\n        width: dimensions.width,\r\n        height: dimensions.height\r\n      }\r\n      \r\n      Object.assign(fileData.rawFileInfo, imageInfo)\r\n      Object.assign(fileData.handleFileInfo, imageInfo)\r\n\r\n      // 生成缩略图\r\n      if (options.generateThumbnail) {\r\n        try {\r\n          // 生成原始缩略图\r\n          const rawThumbnail = await generateThumbnail(file, options.thumbnailSize || 100, false)\r\n          fileData.rawFileInfo.thumbnail = rawThumbnail.base64\r\n          fileData.rawFileInfo.thumbnailUrl = URL.createObjectURL(rawThumbnail.blob)\r\n\r\n          // 生成压缩的缩略图\r\n          const compressedThumbnail = await generateThumbnail(file, options.thumbnailSize || 100, true)\r\n          fileData.handleFileInfo.thumbnail = compressedThumbnail.base64\r\n          fileData.handleFileInfo.thumbnailUrl = URL.createObjectURL(compressedThumbnail.blob)\r\n          fileData.handleFileInfo.compressed = true\r\n          fileData.handleFileInfo.compressedSize = compressedThumbnail.blob.size\r\n          \r\n          fileData.rawFileInfo.processMethod = 'thumbnail'\r\n          fileData.handleFileInfo.processMethod = 'thumbnail+compress'\r\n        } catch (error) {\r\n          logger.warn('生成缩略图失败:', error)\r\n        }\r\n      }\r\n    }\r\n\r\n    // 获取数据库连接\r\n    const db = await useDatabase(dbName)\r\n    const transaction = db.transaction([tableName], 'readwrite')\r\n    const store = transaction.objectStore(tableName)\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = store.add(fileData)\r\n\r\n      request.onsuccess = () => {\r\n        logger.debug(`文件 ${file.name} 保存成功`)\r\n        resolve(ResponseMessages.FILE_SAVE_SUCCESS(request.result))\r\n      }\r\n\r\n      request.onerror = () => {\r\n        logger.error(`保存文件 ${file.name} 失败:`, request.error)\r\n        reject(ResponseMessages.FILE_SAVE_ERROR(request.error))\r\n      }\r\n    })\r\n\r\n  } catch (error) {\r\n    logger.error('保存文件失败:', error)\r\n    return ResponseMessages.FILE_SAVE_ERROR(error)\r\n  }\r\n}\r\n\r\n// 获取图片尺寸\r\nasync function getImageDimensions(file: File): Promise<{ width: number; height: number }> {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image()\r\n    img.onload = () => resolve({ width: img.width, height: img.height })\r\n    img.onerror = reject\r\n    img.src = URL.createObjectURL(file)\r\n  })\r\n}\r\n\r\n// 生成文件短标识\r\nfunction generateFileShortId(): string {\r\n  return Math.random().toString(36).substring(2, 10)\r\n}\r\n\r\n// 生成下载令牌\r\nfunction generateDownloadToken(): string {\r\n  return Math.random().toString(36).substring(2, 15)\r\n}\r\n\r\n/**\r\n * 生成图片缩略图\r\n */\r\nasync function generateThumbnail(\r\n  file: File, \r\n  size: number, \r\n  compress = false\r\n): Promise<{ base64: string; blob: Blob }> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader()\r\n    reader.onload = (e) => {\r\n      const img = new Image()\r\n      img.onload = () => {\r\n        const canvas = document.createElement('canvas')\r\n        const ctx = canvas.getContext('2d')\r\n        \r\n        const scale = size / Math.max(img.width, img.height)\r\n        canvas.width = img.width * scale\r\n        canvas.height = img.height * scale\r\n        \r\n        ctx?.drawImage(img, 0, 0, canvas.width, canvas.height)\r\n        \r\n        // 根据是否压缩使用不同的质量参数\r\n        const quality = compress ? 0.6 : 0.9\r\n        const base64 = canvas.toDataURL('image/jpeg', quality)\r\n        \r\n        // 转换为Blob\r\n        canvas.toBlob(\r\n          (blob) => {\r\n            if (blob) {\r\n              resolve({ base64, blob })\r\n            } else {\r\n              reject(new Error('Failed to create blob'))\r\n            }\r\n          },\r\n          'image/jpeg',\r\n          quality\r\n        )\r\n      }\r\n      img.onerror = reject\r\n      img.src = e.target?.result as string\r\n    }\r\n    reader.onerror = reject\r\n    reader.readAsDataURL(file)\r\n  })\r\n}\r\n\r\nexport default saveFilesToDB ","import ResponseMessages from '../../constant'\r\nimport { useDatabase } from '../index'\r\nimport { logger } from '../../utils/logger'\r\n\r\ninterface GetFileOptions {\r\n  generateUrl?: boolean  // 是否生成新的URL，默认 true\r\n}\r\n\r\n/**\r\n * 从数据库获取文件\r\n * @description 根据ID获取文件信息，支持URL生成\r\n */\r\nasync function getFileFromDB(\r\n  dbName: string,\r\n  tableName: string,\r\n  fileId: number,\r\n  options: GetFileOptions = { generateUrl: true }\r\n): Promise<any> {\r\n  try {\r\n    if (!dbName) return ResponseMessages.DBNAME_IS_NULL()\r\n    if (!tableName) return ResponseMessages.TBNAME_IS_NULL()\r\n    if (!fileId) return ResponseMessages.BASIC_ERROR('文件ID不能为空')\r\n\r\n    const db = await useDatabase(dbName)\r\n    const transaction = db.transaction([tableName], 'readonly')\r\n    const store = transaction.objectStore(tableName)\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = store.get(fileId)\r\n\r\n      request.onsuccess = () => {\r\n        const fileData = request.result\r\n        if (!fileData) {\r\n          reject(ResponseMessages.BASIC_ERROR('文件不存在'))\r\n          return\r\n        }\r\n\r\n        // 如果需要生成新的URL\r\n        if (options.generateUrl) {\r\n          // 生成原始文件URL\r\n          if (fileData.rawFileInfo.file) {\r\n            fileData.url = URL.createObjectURL(fileData.rawFileInfo.file)\r\n            fileData.rawFileInfo.url = fileData.url\r\n          }\r\n\r\n          // 如果有缩略图，也生成缩略图URL\r\n          if (fileData.rawFileInfo.thumbnail) {\r\n            const rawBlob = dataURLtoBlob(fileData.rawFileInfo.thumbnail)\r\n            fileData.rawFileInfo.thumbnailUrl = URL.createObjectURL(rawBlob)\r\n          }\r\n          if (fileData.handleFileInfo.thumbnail) {\r\n            const handleBlob = dataURLtoBlob(fileData.handleFileInfo.thumbnail)\r\n            fileData.handleFileInfo.thumbnailUrl = URL.createObjectURL(handleBlob)\r\n          }\r\n        }\r\n\r\n        logger.debug(`获取文件 ${fileData.name} 成功`)\r\n        resolve(ResponseMessages.FILE_GET_SUCCESS(fileData))\r\n      }\r\n\r\n      request.onerror = () => {\r\n        logger.error('获取文件失败:', request.error)\r\n        reject(ResponseMessages.FILE_GET_ERROR(request.error))\r\n      }\r\n    })\r\n\r\n  } catch (error) {\r\n    logger.error('获取文件失败:', error)\r\n    return ResponseMessages.FILE_GET_ERROR(error)\r\n  }\r\n}\r\n\r\n// base64转Blob\r\nfunction dataURLtoBlob(dataURL: string): Blob {\r\n  const arr = dataURL.split(',')\r\n  const mime = arr[0].match(/:(.*?);/)?.[1]\r\n  const bstr = atob(arr[1])\r\n  let n = bstr.length\r\n  const u8arr = new Uint8Array(n)\r\n  while (n--) {\r\n    u8arr[n] = bstr.charCodeAt(n)\r\n  }\r\n  return new Blob([u8arr], { type: mime })\r\n}\r\n\r\nexport default getFileFromDB ","import ResponseMessages from '../../constant'\r\nimport { useDatabase } from '../index'\r\nimport { logger } from '../../utils/logger'\r\n\r\ninterface GetAllFilesOptions {\r\n  generateUrl?: boolean  // 是否生成URL，默认 true\r\n  page?: number         // 页码，从1开始\r\n  pageSize?: number     // 每页数量\r\n}\r\n\r\n/**\r\n * 获取所有文件\r\n * @description 支持分页和URL生成\r\n */\r\nasync function getAllFiles(\r\n  dbName: string,\r\n  tableName: string,\r\n  options: GetAllFilesOptions = {\r\n    generateUrl: true,\r\n    page: 1,\r\n    pageSize: 10\r\n  }\r\n): Promise<any> {\r\n  try {\r\n    if (!dbName) return ResponseMessages.DBNAME_IS_NULL()\r\n    if (!tableName) return ResponseMessages.TBNAME_IS_NULL()\r\n\r\n    const db = await useDatabase(dbName)\r\n    const transaction = db.transaction([tableName], 'readonly')\r\n    const store = transaction.objectStore(tableName)\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = store.getAll()\r\n\r\n      request.onsuccess = () => {\r\n        let files = request.result\r\n\r\n        // 处理分页\r\n        if (options.page && options.pageSize) {\r\n          const start = (options.page - 1) * options.pageSize\r\n          const end = start + options.pageSize\r\n          files = files.slice(start, end)\r\n        }\r\n\r\n        // 处理文件数据\r\n        files = files.map(fileData => {\r\n          // 如果需要生成URL\r\n          if (options.generateUrl) {\r\n            // 生成原始文件URL\r\n            if (fileData.rawFileInfo.file) {\r\n              fileData.url = URL.createObjectURL(fileData.rawFileInfo.file)\r\n              fileData.rawFileInfo.url = fileData.url\r\n            }\r\n\r\n            // 如果有缩略图，生成缩略图URL\r\n            if (fileData.rawFileInfo.thumbnail) {\r\n              const rawBlob = dataURLtoBlob(fileData.rawFileInfo.thumbnail)\r\n              fileData.rawFileInfo.thumbnailUrl = URL.createObjectURL(rawBlob)\r\n            }\r\n            if (fileData.handleFileInfo.thumbnail) {\r\n              const handleBlob = dataURLtoBlob(fileData.handleFileInfo.thumbnail)\r\n              fileData.handleFileInfo.thumbnailUrl = URL.createObjectURL(handleBlob)\r\n            }\r\n          }\r\n\r\n          return fileData\r\n        })\r\n\r\n        logger.debug(`获取到 ${files.length} 个文件`)\r\n        resolve(ResponseMessages.FILE_GET_SUCCESS(files))\r\n      }\r\n\r\n      request.onerror = () => {\r\n        logger.error('获取文件列表失败:', request.error)\r\n        reject(ResponseMessages.FILE_GET_ERROR(request.error))\r\n      }\r\n    })\r\n\r\n  } catch (error) {\r\n    logger.error('获取文件列表失败:', error)\r\n    return ResponseMessages.FILE_GET_ERROR(error)\r\n  }\r\n}\r\n\r\n// base64转Blob\r\nfunction dataURLtoBlob(dataURL: string): Blob {\r\n  const arr = dataURL.split(',')\r\n  const mime = arr[0].match(/:(.*?);/)?.[1]\r\n  const bstr = atob(arr[1])\r\n  let n = bstr.length\r\n  const u8arr = new Uint8Array(n)\r\n  while (n--) {\r\n    u8arr[n] = bstr.charCodeAt(n)\r\n  }\r\n  return new Blob([u8arr], { type: mime })\r\n}\r\n\r\nexport default getAllFiles ","import ResponseMessages from '../../constant'\r\nimport getFileFromDB from './getFileFromDB'\r\nimport { logger } from '../../utils/logger'\r\n\r\ninterface DownloadOptions {\r\n  type?: 'raw' | 'handled'  // 下载原始文件还是处理后的文件\r\n  fileName?: string        // 自定义文件名\r\n}\r\n\r\n/**\r\n * 下载单个文件\r\n * @description 从数据库获取并下载文件，支持原始文件和处理后的文件\r\n */\r\nasync function downloadFileFromDB(\r\n  dbName: string,\r\n  tableName: string,\r\n  fileId: number,\r\n  options: DownloadOptions = { type: 'raw' }\r\n): Promise<any> {\r\n  try {\r\n    // 获取文件数据\r\n    const result = await getFileFromDB(dbName, tableName, fileId)\r\n    // console.log(result);\r\n    \r\n    if (result.code !== 200) {\r\n      return result\r\n    }\r\n\r\n    const fileData = result.result\r\n    const fileInfo = options.type === 'handled' ? fileData.handleFileInfo : fileData.rawFileInfo\r\n    const file = fileInfo.file || fileInfo.blob\r\n\r\n    // console.log(file);\r\n    \r\n    if (!file) {\r\n      return ResponseMessages.FILE_GET_ERROR('文件数据不存在')\r\n    }\r\n\r\n    // 创建下载链接\r\n    const url = URL.createObjectURL(file)\r\n    const a = document.createElement('a')\r\n    a.href = url\r\n    a.download = options.fileName || fileInfo.name\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n    URL.revokeObjectURL(url)\r\n\r\n    logger.debug(`文件 ${fileInfo.name} 下载成功`)\r\n    return ResponseMessages.FILE_GET_SUCCESS(fileData)\r\n\r\n  } catch (error) {\r\n    logger.error('下载文件失败:', error)\r\n    return ResponseMessages.FILE_GET_ERROR(error)\r\n  }\r\n}\r\n\r\nexport default downloadFileFromDB ","import ResponseMessages from '../../constant'\r\nimport getAllFiles from './getAllFiles'\r\nimport { logger } from '../../utils/logger'\r\nimport JSZip from 'jszip'\r\n\r\ninterface DownloadAllOptions {\r\n  type?: 'raw' | 'handled'  // 下载原始文件还是处理后的文件\r\n  zipName?: string         // 打包下载时的压缩包名称\r\n}\r\n\r\n/**\r\n * 批量下载文件\r\n * @description 支持打包下载多个文件，可选择原始文件或处理后的文件\r\n */\r\nasync function downloadAllFiles(\r\n  dbName: string,\r\n  tableName: string,\r\n  options: DownloadAllOptions = { type: 'raw' }\r\n): Promise<any> {\r\n  try {\r\n    // 获取所有文件\r\n    const result = await getAllFiles(dbName, tableName)\r\n    \r\n    if (result.code !== 200) {\r\n      return result\r\n    }\r\n\r\n    const files = result.result\r\n    if (!files.length) {\r\n      return ResponseMessages.BASIC_ERROR('没有可下载的文件')\r\n    }\r\n\r\n    // 如果只有一个文件，直接下载\r\n    if (files.length === 1) {\r\n      const fileInfo = options.type === 'handled' ? files[0].handleFileInfo : files[0].rawFileInfo\r\n      const file = fileInfo.file || fileInfo.blob\r\n\r\n      if (!file) {\r\n        return ResponseMessages.FILE_GET_ERROR('文件数据不存在')\r\n      }\r\n\r\n      const url = URL.createObjectURL(file)\r\n      const a = document.createElement('a')\r\n      a.href = url\r\n      a.download = fileInfo.name\r\n      document.body.appendChild(a)\r\n      a.click()\r\n      document.body.removeChild(a)\r\n      URL.revokeObjectURL(url)\r\n\r\n      logger.debug(`文件 ${fileInfo.name} 下载成功`)\r\n      return ResponseMessages.FILE_GET_SUCCESS(files[0])\r\n    }\r\n\r\n    // 多个文件，使用 JSZip 打包下载\r\n    const zip = new JSZip()\r\n\r\n    files.forEach((fileData: any) => {\r\n      const fileInfo = options.type === 'handled' ? fileData.handleFileInfo : fileData.rawFileInfo\r\n      const file = fileInfo.file || fileInfo.blob\r\n      if (file) {\r\n        zip.file(fileInfo.name, file)\r\n      }\r\n    })\r\n\r\n    const zipBlob = await zip.generateAsync({ type: 'blob' })\r\n    const url = URL.createObjectURL(zipBlob)\r\n    const a = document.createElement('a')\r\n    a.href = url\r\n    a.download = options.zipName || `files_${Date.now()}.zip`\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n    URL.revokeObjectURL(url)\r\n\r\n    logger.debug(`${files.length} 个文件打包下载成功`)\r\n    return ResponseMessages.FILE_GET_SUCCESS(files)\r\n\r\n  } catch (error) {\r\n    logger.error('批量下载文件失败:', error)\r\n    return ResponseMessages.FILE_GET_ERROR(error)\r\n  }\r\n}\r\n\r\nexport default downloadAllFiles ","/**\r\n * 释放文件URL，避免内存泄漏\r\n * @param url 文件URL\r\n */\r\nfunction revokeFileUrl(url: string): void {\r\n  if (url.startsWith('blob:') || url.startsWith('data:')) {\r\n    URL.revokeObjectURL(url)\r\n  }\r\n}\r\n\r\nexport default revokeFileUrl ","/**\r\n * 生成文件短标识\r\n */\r\nexport function generateFileShortId(): string {\r\n  const timestamp = Date.now().toString(36)\r\n  const random = Math.random().toString(36).substring(2, 8)\r\n  return `${timestamp}-${random}`\r\n}\r\n\r\n/**\r\n * 创建文件下载令牌\r\n */\r\nexport async function createFileDownloadToken(\r\n  file: File,\r\n  customName?: string\r\n): Promise<string> {\r\n  const fileData = await file.arrayBuffer()\r\n  const hash = await crypto.subtle.digest('SHA-256', fileData)\r\n  const hashArray = Array.from(new Uint8Array(hash))\r\n  const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('')\r\n  \r\n  return `${hashHex}_${customName || file.name}`\r\n} ","import ResponseMessages from '../../constant'\r\nimport { useDatabase, createTable, getTableNames } from '../index'\r\nimport { logger } from '../../utils/logger'\r\nimport { findDBData } from '../index'\r\n\r\ninterface MigrationOptions {\r\n  overwrite?: boolean\r\n  transform?: (data: any) => any\r\n  onProgress?: (progress: MigrationProgress) => void\r\n}\r\n\r\ninterface MigrationProgress {\r\n  phase: 'reading' | 'writing'\r\n  current: number\r\n  total: number\r\n  percentage: number\r\n  message: string\r\n}\r\n\r\nasync function migrateData(\r\n  fromDB: string,\r\n  toDB: string,\r\n  options: MigrationOptions = {}\r\n): Promise<any> {\r\n  try {\r\n    // 1. 获取源数据库的所有数据\r\n    const sourceData = await findDBData(fromDB)\r\n    console.log('源数据:', sourceData)\r\n\r\n    if (!sourceData || !Array.isArray(sourceData)) {\r\n      return ResponseMessages.TB_MIGRATE_ERROR('源数据库为空')\r\n    }\r\n\r\n    // 2. 获取所有表名和版本信息\r\n    const tables = sourceData.map(table => ({\r\n      name: table.tableName,\r\n      version: table.version || 1\r\n    }))\r\n\r\n    if (!tables.length) {\r\n      return ResponseMessages.TB_MIGRATE_ERROR('源数据库没有表')\r\n    }\r\n\r\n    // 3. 获取目标数据库的已有表\r\n    const existingTablesResult = await getTableNames(toDB)\r\n    const existingTables = existingTablesResult?.result || []\r\n\r\n    // 4. 只为不存在的表创建表结构\r\n    const tablesToCreate = tables.filter(table => !existingTables.includes(table.name))\r\n    if (tablesToCreate.length > 0) {\r\n      logger.debug(`需要创建 ${tablesToCreate.length} 个表`)\r\n      for (const table of tablesToCreate) {\r\n        await createTable(toDB, table.name, { version: table.version })\r\n        logger.debug(`表 ${table.name} 创建成功`)\r\n      }\r\n    }\r\n\r\n    // 5. 获取数据库连接\r\n    const targetDB = await useDatabase(toDB)\r\n\r\n    // 6. 遍历每个表进行数据迁移\r\n    let totalRecords = 0\r\n    for (const table of sourceData) {\r\n      try {\r\n        const tableName = table.tableName\r\n\r\n        // 读取阶段\r\n        if (options.onProgress) {\r\n          options.onProgress({\r\n            phase: 'reading',\r\n            current: sourceData.indexOf(table),\r\n            total: sourceData.length,\r\n            percentage: Math.round((sourceData.indexOf(table) / sourceData.length) * 100),\r\n            message: `正在读取表 ${tableName} 的数据`\r\n          })\r\n        }\r\n\r\n        let tableData = table.children?.result || []\r\n        if (!Array.isArray(tableData)) {\r\n          logger.warn(`表 ${tableName} 的数据不是数组，跳过`)\r\n          continue\r\n        }\r\n\r\n        // 数据转换\r\n        if (options.transform) {\r\n          tableData = options.transform(tableData)\r\n        }\r\n\r\n        // 写入阶段\r\n        if (options.onProgress) {\r\n          options.onProgress({\r\n            phase: 'writing',\r\n            current: sourceData.indexOf(table),\r\n            total: sourceData.length,\r\n            percentage: Math.round((sourceData.indexOf(table) / sourceData.length) * 100),\r\n            message: `正在写入表 ${tableName} 的数据`\r\n          })\r\n        }\r\n\r\n        const transaction = targetDB.transaction(tableName, 'readwrite')\r\n        const store = transaction.objectStore(tableName)\r\n\r\n        // 如果需要覆盖，先清空目标表\r\n        if (options.overwrite) {\r\n          await new Promise((resolve, reject) => {\r\n            const request = store.clear()\r\n            request.onsuccess = () => resolve(undefined)\r\n            request.onerror = () => reject(request.error)\r\n          })\r\n        }\r\n\r\n        // 批量写入数据\r\n        await Promise.all(tableData.map((item: any) => {\r\n          return new Promise((resolve, reject) => {\r\n            const request = store.add(item)\r\n            request.onsuccess = () => resolve(undefined)\r\n            request.onerror = () => reject(request.error)\r\n          })\r\n        }))\r\n\r\n        totalRecords += tableData.length\r\n        logger.debug(`表 ${tableName} 迁移完成，共迁移 ${tableData.length} 条记录`)\r\n\r\n      } catch (error) {\r\n        logger.error(`迁移表 ${table.tableName} 失败:`, error)\r\n        throw error\r\n      }\r\n    }\r\n\r\n    // 7. 关闭目标数据库连接\r\n    targetDB.close()\r\n\r\n    const result = {\r\n      fromDB,\r\n      toDB,\r\n      tables: tables.map(t => t.name),\r\n      totalRecords\r\n    }\r\n\r\n    logger.debug('数据迁移成功:', result)\r\n    return ResponseMessages.TB_MIGRATE_SUCCESS(result)\r\n\r\n  } catch (error) {\r\n    logger.error('数据迁移失败:', error)\r\n    return ResponseMessages.TB_MIGRATE_ERROR(error)\r\n  }\r\n}\r\n\r\nexport default migrateData ","import ResponseMessages from '../../constant'\r\nimport { findDBData } from '../index'\r\nimport { logger } from '../../utils/logger'\r\n\r\ninterface ExportOptions {\r\n  pretty?: boolean      // 是否美化输出\r\n  download?: boolean    // 是否下载文件\r\n  fileName?: string     // 下载的文件名\r\n}\r\n\r\nasync function exportToJson(dbName: string, options: ExportOptions = {}): Promise<any> {\r\n  try {\r\n    const { \r\n      pretty = false, \r\n      download = true,\r\n      fileName = `${dbName}_export.json` \r\n    } = options\r\n\r\n    // 使用 findDBData 获取所有数据\r\n      const sourceData = await findDBData(dbName)\r\n      console.log(sourceData);\r\n      \r\n    if (!sourceData || !Array.isArray(sourceData)) {\r\n      return ResponseMessages.JSON_EXPORT_ERROR('数据库为空')\r\n    }\r\n\r\n    // 构建导出数据\r\n    const exportData = {\r\n      database: dbName,\r\n      exportedAt: new Date().toISOString(),\r\n      tables: sourceData.map(table => table.tableName),\r\n      data: sourceData.reduce((acc, table) => {\r\n        acc[table.tableName] = table.children?.result || []\r\n        return acc\r\n      }, {} as Record<string, any[]>)\r\n    }\r\n\r\n    // 转换为JSON\r\n    const jsonString = pretty \r\n      ? JSON.stringify(exportData, null, 2)\r\n      : JSON.stringify(exportData)\r\n\r\n    // 如果需要下载\r\n    if (download) {\r\n      const blob = new Blob([jsonString], { type: 'application/json' })\r\n      const url = URL.createObjectURL(blob)\r\n      const a = document.createElement('a')\r\n      a.href = url\r\n      a.download = fileName\r\n      document.body.appendChild(a)\r\n      a.click()\r\n      document.body.removeChild(a)\r\n      URL.revokeObjectURL(url)\r\n    }\r\n\r\n    return ResponseMessages.JSON_EXPORT_SUCCESS({\r\n      data: jsonString,\r\n      tables: exportData.tables,\r\n      totalTables: exportData.tables.length,\r\n      fileName: download ? fileName : undefined\r\n    })\r\n\r\n  } catch (error) {\r\n    logger.error('导出JSON失败:', error)\r\n    return ResponseMessages.JSON_EXPORT_ERROR(error)\r\n  }\r\n}\r\n\r\nexport default exportToJson ","import ResponseMessages from '../../constant'\r\nimport { useDatabase, createTable } from '../index'\r\nimport { logger } from '../../utils/logger'\r\n\r\ninterface ImportProgress {\r\n  phase: 'preparing' | 'importing'\r\n  current: number\r\n  total: number\r\n  percentage: number\r\n  message: string\r\n}\r\n\r\ninterface ImportOptions {\r\n  overwrite?: boolean\r\n  onProgress?: (progress: ImportProgress) => void\r\n}\r\n\r\nasync function importFromJson(\r\n  dbName: string,\r\n  jsonData: string,\r\n  options: ImportOptions = {}\r\n): Promise<any> {\r\n  try {\r\n    const { overwrite = false, onProgress } = options\r\n\r\n    // 解析JSON数据\r\n    const importData = JSON.parse(jsonData)\r\n    const { tables, data } = importData\r\n\r\n    if (!tables || !data) {\r\n      throw new Error('无效的JSON数据格式')\r\n    }\r\n\r\n    // 获取数据库连接\r\n    const db = await useDatabase(dbName)\r\n\r\n    let totalRecords = 0\r\n    for (const [tableName, tableData] of Object.entries(data)) {\r\n      try {\r\n        // 进度通知 - 准备阶段\r\n        if (onProgress) {\r\n          onProgress({\r\n            phase: 'preparing',\r\n            current: tables.indexOf(tableName),\r\n            total: tables.length,\r\n            percentage: Math.round((tables.indexOf(tableName) / tables.length) * 100),\r\n            message: `正在准备导入表 ${tableName}`\r\n          })\r\n        }\r\n\r\n        // 确保表存在\r\n        if (!db.objectStoreNames.contains(tableName)) {\r\n          await createTable(dbName, tableName)\r\n        }\r\n\r\n        const transaction = db.transaction(tableName, 'readwrite')\r\n        const store = transaction.objectStore(tableName)\r\n\r\n        // 如果需要覆盖，先清空表\r\n        if (overwrite) {\r\n          await new Promise((resolve, reject) => {\r\n            const request = store.clear()\r\n            request.onsuccess = () => resolve(undefined)\r\n            request.onerror = () => reject(request.error)\r\n          })\r\n        }\r\n\r\n        // 导入数据\r\n        if (Array.isArray(tableData)) {\r\n          await Promise.all(tableData.map((item: any) => {\r\n            return new Promise((resolve, reject) => {\r\n              const request = store.add(item)\r\n              request.onsuccess = () => resolve(undefined)\r\n              request.onerror = () => reject(request.error)\r\n            })\r\n          }))\r\n\r\n          totalRecords += tableData.length\r\n        }\r\n\r\n        // 进度通知 - 导入阶段\r\n        if (onProgress) {\r\n          onProgress({\r\n            phase: 'importing',\r\n            current: tables.indexOf(tableName) + 1,\r\n            total: tables.length,\r\n            percentage: Math.round(((tables.indexOf(tableName) + 1) / tables.length) * 100),\r\n            message: `表 ${tableName} 导入完成`\r\n          })\r\n        }\r\n\r\n      } catch (error) {\r\n        logger.error(`导入表 ${tableName} 失败:`, error)\r\n        throw error\r\n      }\r\n    }\r\n\r\n    return ResponseMessages.JSON_IMPORT_SUCCESS({\r\n      tables,\r\n      totalRecords\r\n    })\r\n\r\n  } catch (error) {\r\n    logger.error('导入JSON失败:', error)\r\n    return ResponseMessages.JSON_IMPORT_ERROR(error)\r\n  }\r\n}\r\n\r\nexport default importFromJson ","// 从 core/index.ts 导入所有核心功能\r\nexport {\r\n  useDatabase,\r\n  deleteTable,\r\n  deleteDatabase,\r\n  deleteAllDatabases,\r\n  closeAllConnections,\r\n  getTableNames,\r\n  deleteAllTables,\r\n  // 表操作\r\n  createTable,\r\n  insertOne,\r\n  insertMany,\r\n  findDBData,\r\n  findByKey,\r\n  findByIndex,\r\n  deleteOneByPk,\r\n  deleteOneByIndex,\r\n  deleteManyByPK,\r\n  deleteManyByIndex,\r\n  updateDataByPrimaryKey,\r\n  updateDataByIndex\r\n} from './core'\r\n\r\n// 从 core/query 导入查询功能\r\nexport {  createQuery } from './core/query/createQuery'\r\n\r\n// 从 core/file 导入文件操作\r\nexport {\r\n  saveFilesToDB,\r\n  getFileFromDB,\r\n  getAllFiles,\r\n  downloadFileFromDB,\r\n  downloadAllFiles,\r\n  revokeFileUrl\r\n} from './core/file'\r\n\r\n// 从 core/file/utils 导入文件工具函数\r\nexport {\r\n  generateFileShortId,\r\n  createFileDownloadToken\r\n} from './core/file/utils'\r\n\r\n// 从 core/migration 导入数据迁移功能\r\nexport { default as migrateData } from './core/migration/migrateData'\r\n\r\n// 从 core/json 导入 JSON 导入导出功能\r\nexport { default as exportToJson } from './core/json/exportToJson'\r\nexport { default as importFromJson } from './core/json/importFromJson' "],"names":["returnFormater","closeAllConnections","deleteAllTables","createTable","insertOne","__assign","insertMany","findDBData","findByKey","findByIndex","deleteOneByPk","deleteOneByIndex","deleteManyByPK","deleteManyByIndex","updateDataByPrimaryKey","updateDataByIndex","__spreadArray","dataURLtoBlob","generateFileShortId"],"mappings":"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"}